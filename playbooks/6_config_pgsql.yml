- hosts: all
  gather_facts: true
  become: true
  tasks:
    # postgresql.conf

    - name: set pam limits open files
      ansible.builtin.pam_limits:
        dest: "/etc/security/limits.d/postgresql.conf"
        domain: "{{ item.domain }}"
        limit_item: "{{ item.limit_name }}"
        limit_type: "{{ item.limit_type | default ('soft') }}"
        value: "{{ item.value }}"
        comment: "{{ item.comment | default (omit) }}"
      loop: "{{ postgresql_system_limits | default ([]) }}"


    - name: CHECK BACKUP FILE EXISTS
      ansible.builtin.stat:
        path: "/root/postgresql.conf"
      register: _backup_config
  
    - block: 
      - name: RESTORE ORIGINAL CONFIG
        ansible.builtin.copy:
          remote_src: true
          src: "/root/postgresql.conf"
          dest: "/etc/postgresql/{{ postgresql_version }}/main/postgresql.conf"

      - name: PWD SHOW
        ansible.builtin.debug:
          msg: "'{{ lookup('ansible.builtin.env', 'PWD') }}'"

      - name: UPDATE CONFIG
        ansible.builtin.blockinfile:
          path: "/etc/postgresql/{{ postgresql_version }}/main/postgresql.conf"
          insertbefore: "EOF"
          block: "{{ item }}"
        with_items:
          - "{{ lookup('ansible.builtin.file', '{{ workload_files_dir }}/files/configs/pg_{{ postgresql_version }}.conf') }}"
        when: postgresql_cybertec_config|bool
          
      - name: SET LISTEN TO ALL INTERFACES
        ansible.builtin.lineinfile: 
          dest: "/etc/postgresql/{{ postgresql_version }}/main/postgresql.conf"
          regexp: "listen_addresses =" 
          line: "listen_addresses = '*'" 
          state: present

      - name: ADD ENTRIES TO HBA
        community.postgresql.postgresql_pg_hba:
          dest: /etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf
          contype: "{{ item.contype }}"
          users: "{{ item.users }}"
          source: "{{ item.source }}"
          databases: "{{ item.databases }}"
          method: "{{ item.method }}"
          create: true
        with_items:
          - "{{ postgresql_hba_list }}"
      when: _backup_config.stat.exists

    - name: Reset Params
      become_user: postgres
      community.postgresql.postgresql_set:
        name: "{{ item.name }}"
        reset: true
      loop: "{{ postgresql_system_params }}"
      register: _reset 

    - name: Set work mem parameter
      become_user: postgres
      community.postgresql.postgresql_set:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
      register: _set
      loop: "{{ postgresql_system_params }}"
      when: postgresql_custom_params|bool
  
    - name: RESTART POSTGRESQL
      ansible.builtin.service:
        name: postgresql
        state: restarted
